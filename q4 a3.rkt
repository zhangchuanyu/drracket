;q4a zhangchaunyu 100988193
(define (increase x) (+ x 1))
(define (filter predicate sequence)
    (cond ((null? sequence) '())
          ((predicate (car sequence)) 
		       (cons (car sequence) 
                     (filter predicate (cdr sequence))))
          (else (filter predicate (cdr sequence)))))
(define (depth l)
  (define (count depth els)
    (define remaining (filter list? els))
    (if (zero? (length remaining))
        depth
        (count (increase depth) (apply append remaining))))
  (count 1 l))
(display "question 5 a")
(newline)
(newline)
(display "(depth '(a)):")
(depth '(a))
(newline)
(display "(depth '(a (b) c)):")
(depth '(a (b) c))
(newline)
(display "(depth '(((((a(((b))))))))) :")
(depth '(((((a(((b))))))))) 
;b
(define (treemap operation x)
  (if (null? x) '()
      (if (pair? x) (if (not ( and (null? (car x)) (null? (cdr x))))
                        (cons (treemap operation (car x)) (treemap operation (cdr x)))
                        (if (not (null? (car x))) (cons (treemap operation (car x)))
              (cons (treemap operation (cdr x)))))
      (operation x))))
(define (sqr x) (* x x))
(display "question 4b:(treemap sqr '(1 (2 3) ((4 5) (6 7)) (((8 (9)))))) → (1 (4 9) ((16 25) (36 49)) (((64 (81))))):")
(newline)
(treemap sqr '(1 (2 3) ((4 5) (6 7)) (((8 (9))))))
;c
               
(define (flattenList l)
  (cond ((null? l) '())
        ((not (pair? l))  (append(flattenList (car l)) (flattenList(cdr l))))
        (else (list l))))
(display "question 4 c")
(newline)
(display "(flattenList '(1 (2 3) ((4 5 6 (7)))(((8 (9)))))) → (1 2 3 4 5 6 7 8 9)")
(flattenList '(1 (2 3) ((4 5 6 (7)))(((8 (9))))))